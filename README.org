#+SETUPFILE: ~/org/conf/org-html-themes/setup/theme-readtheorg.setup

#+HTML_HEAD: <link rel="stylesheet" href="/home/sarthak/org/conf/css/rto_big.css" type="text/css">

#+OPTIONS: num:nil ^:nil \n:t H:6
#+TITLE: Eloquent JS notes

* Chapter 1 (Values, Types, and Operators)
** Notes
*** null and undefined comparison

 When the types differ, JavaScript uses a complicated and confusing
 set of rules to determine what to do. In most cases, it just tries to
 convert one of the values to the other value’s type. However, when
 ~null~ or ~undefined~ occurs on either side of the operator, it produces
 true only if both sides are one of ~null~ or ~undefined~.

 #+begin_src js :exports both :results output
// null or undefined on both sides means equal
console.log(null == undefined); //true
console.log(null !== undefined); //true

// null or undefined on only one side means not equal
console.log(null == 0); //false
console.log(null !== 0); //true
 #+end_src

 #+RESULTS:
 : true
 : true
 : false
 : false
 : true


 *Use ~===~ or ~!==~ operator if you don't want type conversion.*

 #+begin_src js :exports both :results output
// triple equal sign checks if it is the same thing without type conversion
console.log(null === null);
console.log(undefined === undefined);

// but two non-sensical values are not the same
console.log(NaN === NaN);
 #+end_src

 #+RESULTS:
 : true
 : true
 : false

*** || and && operators

 The ~||~ operator works like following(pseudocode):
 #+begin_src js :eval no
function ||(left, right) {
  if convertToBoolean(left) === True {
      return left;
  }
  return right
}
// For eg: 0 || 8 returns 8
// 0, NaN and empty string => false, others => true
 #+end_src

 #+RESULTS:

 The ~&&~ operator works the same way but  is the exact opposite(pseudocode):

 #+begin_src js :eval no
function &&(left, right) {
  if convertToBoolean(left) === False {
      return left;
  }
  return right;
}

// For eg: 0 && 8 returns 0
// 0, NaN and empty string => false, others => true
 #+end_src

* Chapter 2 (Program Structure)
** Exercises

*** Looping a triange
    Write a loop that makes seven calls to console.log to output the following triangle:
#+begin_example
#
##
###
####
#####
######
#######
#+end_example

**** Solution:
#+begin_src js :exports both :results output
for(let i = 0; i < 7; i++){
  for(let j = 0; j <= i; j++){
    process.stdout.write("#");
  }
  process.stdout.write("\n");
}
#+end_src

#+RESULTS:
: #
: ##
: ###
: ####
: #####
: ######
: #######

*** FizzBuzz
Write a program that uses console.log to print all the numbers from 1
to 100, with two exceptions. For numbers divisible by 3, print "Fizz"
instead of the number, and for numbers divisible by 5 (and not 3),
print "Buzz" instead.

When you have that working, modify your program to print "FizzBuzz"
for numbers that are divisible by both 3 and 5 (and still print "Fizz"
or "Buzz" for numbers divisible by only one of those).

**** Solution:
#+begin_src js :exports both :results output
for (let i = 1; i <= 100; i++) {
  if (i % 3 === 0 && i % 5 === 0) {
    console.log("FizzBuzz");
  } else if (i % 3 === 0) {
    console.log("Fizz");
  } else if (i % 5 === 0){
    console.log("Buzz");
  } else {
    console.log(i);
  }
}
#+end_src

#+RESULTS:
#+begin_example
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz
#+end_example

*** CHESSBOARD
    Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a "#" character. The characters should form a chessboard.

Passing this string to console.log should show something like this:
#+begin_example
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
#+end_example

When you have a program that generates this pattern, define a binding size = 8 and change the program so that it works for any size, outputting a grid of the given width and height.

**** Solution:


#+begin_src js :exports both :results output
let add_offset = false;
let size = 8;
for (let i = 0; i < size; i++) {
    for (let j = 0; j < size; j++) {
        if (j % 2 == 0) {
            process.stdout.write("#");
        } else {
            process.stdout.write(" ");
        }
    }
    process.stdout.write("\n");
    add_offset = !add_offset;
    if (add_offset) {
        process.stdout.write(" ");
    }
}
#+end_src

#+RESULTS:
: # # # #
:  # # # #
: # # # #
:  # # # #
: # # # #
:  # # # #
: # # # #
:  # # # #

* Chapter 3 (Functions)
** Notes

*** Creating local scope
~let~ and ~const~ are created within the local scope whereas ~var~ is visible throughout the global scope if called outside a function.
#+begin_src js  :exports both :results output
var x = 10;
if(1){
  var y = 20;
}

console.log(x);
console.log(y);

function test(){
  var k = 20;
}
// console.log(k)    // this throws ReferenceError
#+end_src

#+RESULTS:
: 10
: 20

#+begin_src js  :exports code :results output
if(1){
  let y = 20;
}

// console.log(y)    // this throws ReferenceError
#+end_src

*** Function declaration

Functions are conceptually moved to the top of their scope so we can define it later in the code.

#+begin_src js :results output
console.log("And in the end, he said: ", later());

function later() {
  return "Hero ko entry last ma huncha..";
}
#+end_src

#+RESULTS:
: And in the end, he said:  Hero ko entry last ma huncha..
: undefined

*** Extra or missing arguments
    JavaScript is extremely broad-minded about the number of arguments you pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters get assigned the value undefined.

*** Closures

Inner functions(functions inside functions) in javascript keep track of their free variables even when the execution of the external function has finished.

A simple use case for closures:
#+begin_src js  :exports code :results output
function wrap_tag(tag){
  function content(msg){
    console.log("<" + tag + ">" + msg + "</" + tag + ">");
  }
  return content;
}

let h1_wrapped = wrap_tag("h1");
let heading_content = h1_wrapped("Welcome to my site!");

let paragraph_wrapped = wrap_tag("p");
let paragraph_content = paragraph_wrapped("This is the content");
#+end_src

#+RESULTS:
: <h1>Welcome to my site!</h1>
: <p>This is the content</p>

** Exercises

*** Minimum

The previous chapter introduced the standard function ~Math.min~ that
returns its smallest argument. We can build something like that
now. Write a function min that takes two arguments and returns their
minimum.

**** Solution:
     #+begin_src js :exports both :results output
function min(first, second) {
    if (first < second) {
        return first;
    }
    return second;
}

console.log(min(100, 20));
console.log(min(10, 20));
     #+end_src

     #+RESULTS:
     : 20
     : 10

*** RECURSION

We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:

    + Zero is even.

    + One is odd.

    + For any other number N, its evenness is the same as N - 2.

Define a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.

Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?

**** Solution:
#+begin_src js :exports both :results output
function isEven(number) {
    if (number == 0) {
        return true;
    } else if (number == 1) {
        return false;
    }
    return isEven(number - 2);
}

console.log(isEven(50));
console.log(isEven(75));
// console.log(isEven(-1)); RangeError: Maximum call stack size exceeded
#+end_src

     #+RESULTS:
     : true
     : false

The reason behind the ~RangeError~ exception is that subtracting 2 from a negative number will make the number even smaller and it will never reach 0 or 1. Hence, the stack overflows. To fix this problem, we add 2 instead of subtracting if the number is less than 0, else we subtract 2:

#+begin_src js :exports both :results output
function isEven(number) {
    if (number == 0) {
        return true;
    } else if (number == 1) {
        return false;
    }

    if (number < 0) {
        return isEven(number + 2);
    } else {
        return isEven(number - 2);
    }

}

console.log(isEven(50));
console.log(isEven(75));
console.log(isEven(-1));
#+end_src

#+RESULTS:
: true
: false
: false

*** Bean Counting

You can get the Nth character, or letter, from a string by writing ~"string"[N]~. The returned value will be a string containing only one character (for example, "b"). The first character has position 0, which causes the last one to be found at position string.length - 1. In other words, a two-character string has length 2, and its characters have positions 0 and 1.

Write a function ~countBs~ that takes a string as its only argument and returns a number that indicates how many uppercase “B” characters there are in the string.

Next, write a function called countChar that behaves like countBs, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase “B” characters). Rewrite countBs to make use of this new function.

**** Solution:
#+begin_src js :exports both :results output
function countBs(string) {
    let count = 0;
    for (let i = 0; i < string.length; i++) {
        if (string[i] === "B") {
            count++;
        }
    }
    return count;
}
console.log(countBs("BBBcccCB"));
#+end_src

     #+RESULTS:
     : 4

For ~countChar~:
#+begin_src js :exports both :results output
function countChar(string, character) {
    let count = 0;
    for (let i = 0; i < string.length; i++) {
        if (string[i] === character) {
            count++;
        }
    }
    return count;
}
console.log(countChar("BBBcccssCB", "c"));
#+end_src

#+RESULTS:
: 3

* Chapter 3 (Objects and Arrays)

** Notes

*** Properties

Almost all javascript values have properties except ~null~ and ~undefined~.

*** Mutability

#+begin_src js :exports both :results output
let object1 = {"value": 10}
let object2 = object1;
let object3 = {"value": 10}

//object1 and object2 point to the same reference in memory
console.log(object1 === object2);
console.log(object1 == object2);

//object1 and object3 don't point to the same reference in memory
console.log(object1 === object3);
console.log(object1 == object3);
#+end_src

#+RESULTS:
: true
: true
: false
: false

*** Shift/Unshift

~unshift()~ adds element to the start of array.
~shift()~ removes element from  the end of array.

#+begin_src js :exports both :results output
let fruits = ["Banana", "Orange", "Apple", "Mango"];

fruits.shift();
console.log(fruits);

fruits.unshift("Lemon");
console.log(fruits);
#+end_src

#+RESULTS:
: [ 'Orange', 'Apple', 'Mango' ]
: [ 'Lemon', 'Orange', 'Apple', 'Mango' ]

*** Slice
~slice()~ returns the elements between two indexes. The start index is inclusive and ~the end index is exclusive~.

#+begin_src js :exports both :results output
let fruits = ["Banana", "Orange", "Apple", "Mango"];

sliced_fruits = fruits.slice(1,3);
console.log(sliced_fruits);
#+end_src

#+RESULTS:
: [ 'Orange', 'Apple' ]

*** Passing list of arguments

We use ~...args~ (three dots) before the name of the varible which will store the unspecified number of arguments(in this case,

Similar to ~*args* in python.

#+begin_src js :exports both :results output
function printFruits(first, second, ...other){
  console.log("First fruit = ", first);
  console.log("Second fruit = ", second);
  console.log("Others:");
  for (let fruit of other){
    console.log(fruit);
  }
}
printFruits("Apple", "Banana", "Mango", "Lemon")
#+end_src

#+RESULTS:
: First fruit =  Apple
: Second fruit =  Banana
: Others:
: Mango
: Lemon

*** ~let~ and ~const~ multiple declaration

~let~ and ~const~ throw ~SyntaxError~ when if we try to declare the same object multiple times.

However, This is allowed if we use ~var~ or when redeclaring with ~function~.
#+begin_src js :results output
let a = 5;
// let a = 10; // SyntaxError

var b = 10;
var b = 5; // this is allowed
#+end_src

#+RESULTS:
: 0.3692661904450243

** Exercises

*** THE SUM OF A RANGE

Given below is an example program:
#+begin_src js :exports code :eval no
console.log(sum(range(1, 10)));
#+end_src

#+RESULTS:

Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.

Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.

As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” value used when building the array. If no step is given, the elements go up by increments of one, corresponding to the old behavior. The function call range(1, 10, 2) should return [1, 3, 5, 7, 9]. Make sure it also works with negative step values so that range(5, 2, -1) produces [5, 4, 3, 2].

**** Solution:

  The range function:
  #+begin_src js :noweb-ref 3-unmodified-range-function  :exports both :results output
function range(start, end){
  let final = [];
  for(let i = start; i <= end; i++){
    final.push(i);
  }
  return final;
}
  #+end_src

  The sum function:
  #+begin_src js :noweb-ref 3-sum-function   :exports code :results output :eval no
function sum(array){
  let final = 0;
  for(let element of array){
    final += element;
  }
  return final;
}
console.log(sum(range(1, 10)));
  #+end_src


  #+begin_src js :noweb yes :exports results :results output
<<3-unmodified-range-function>>
<<3-sum-function>>
  #+end_src

  #+RESULTS:
  : 55

  The modified function with step looks like the following:
  #+begin_src js :exports both :results output
function range(start, end, step) {
    let final = [];
    if (step < 0) {
        negative_range()
    } else {
        positive_range()
    }

    function positive_range() {
        for (let i = start; i <= end; i = i + step) {
            final.push(i);
        }
    }

    function negative_range() {
        for (let i = start; i >= end; i = i + step) {
            final.push(i);
        }
    }
    return final;
}
console.log(range(1, 10, 2));
console.log(range(5, 2, -1));
  #+end_src

  #+RESULTS:
  : [ 1, 3, 5, 7, 9 ]
  : [ 5, 4, 3, 2 ]

*** Reversing an array

Arrays have a reverse method that changes the array by inverting the order in which its elements appear. For this exercise, write two functions, ~reverseArray~ and ~reverseArrayInPlace~. The first, ~reverseArray~, takes an array as argument and produces a new array that has the same elements in the inverse order. The second, ~reverseArrayInPlace~, does what the reverse method does: it modifies the array given as argument by reversing its elements. Neither may use the standard reverse method.

Thinking back to the notes about side effects and pure functions in the previous chapter, which variant do you expect to be useful in more situations? Which one runs faster?

**** Solution:

The ~reverseArray~ function:
#+begin_src js  :exports both :results output
function reverseArray(array){
  let final = [];
  for(let i = array.length-1; i >= 0; i--){
    final.push(array[i]);
  }
  return final;
}
console.log(reverseArray([1,2,3,4, 5, 6, 7, 8, 9, 10]));
#+end_src

#+RESULTS:
: [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]

The ~reverseArrayInPlace~ function:
#+begin_src js :exports code :results output
function reverseArrayInPlace(array){
  let replace_index = array.length -1 ;
  let array_length = array.length;
  let loop_until = Math.floor(array_length/2);
  let temp = 0;
  for(let index = 0; index <= loop_until; index++){
    temp = array[index];
    array[index] = array[replace_index];
    array[replace_index] = temp;
    replace_index--;
  }
  return array;
}
console.log(reverseArrayInPlace([1,2,3,4,5,6,7,8,9,10]));
#+end_src

#+RESULTS:
: [ 10, 9, 8, 7, 5, 6, 4, 3, 2, 1 ]

The ~reverseArray~ runs faster because it performs less operation. However, it uses more space. So, ~reverseArray()~ can be used if performance is important and ~reverseArrayinPlace~ can be used if saving space is important.


*** A LIST
 A list is a nested set of objects, with the first object holding a reference to the second, the second to the third, and so on.

#+begin_src js :exports code :results output
let list = {
  value: 1,
  rest: {
    value: 2,
    rest: {
      value: 3,
      rest: null
    }
  }
};
#+end_src

Write a function ~arrayToList~ that builds up a list structure like the one shown when given [1, 2, 3] as argument. Also write a ~listToArray~ function that produces an array from a list. Then add a helper function prepend, which takes an element and a list and creates a new list that adds the element to the front of the input list, and nth, which takes a list and a number and returns the element at the given position in the list (with zero referring to the first element) or undefined when there is no such element.

If you haven’t already, also write a recursive version of nth.

#+caption: arrayToList
#+begin_src js :noweb-ref 4-arrayToList :exports both :results output
function arrayToList(array){
  let final_list = null;
  let temp = {};
  for(let i = array.length - 1; i >= 0; i--){
    final_list =  {"value": array[i], "rest": final_list}
  }
  return final_list;
}
#+end_src

#+begin_src js :noweb yes js :exports results :results output
<<4-arrayToList>>
console.log(arrayToList([1,2,3]));
#+end_src

#+RESULTS:
: { value: 1, rest: { value: 2, rest: { value: 3, rest: null } } }

#+caption: listToArray
#+begin_src js :exports both :results output
function listToArray (list){
  let finalArray = [];
  for(let node = list; node; node=node.rest){
    finalArray.push(node.value);
  }
  return finalArray;
}
console.log(listToArray({ value: 1, rest: { value: 2, rest: { value: 3, rest: null } } }));
#+end_src


#+RESULTS:
: [ 1, 2, 3 ]

#+caption: recursive nth
#+begin_src js :noweb-ref 4-nth :exports code :results output
function nth(list, index){
  if(index == 0){
    return list["value"];
  }
  return nth(list["rest"], index-1,);
}
console.log(nth(arrayToList([10, 20, 30]), 2));
#+end_src

#+RESULTS:

#+begin_src js :noweb yes :exports results :results output
<<4-arrayToList>>
<<4-nth>>
#+end_src


#+RESULTS:
: 30

*** DEEP COMPARISON
The ~==~ operator compares objects by identity. But sometimes you’d prefer to compare the values of their actual properties.

Write a function deepEqual that takes two values and returns true only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to deepEqual.

To find out whether values should be compared directly (use the === operator for that) or have their properties compared, you can use the ~typeof~ operator. If it produces "object" for both values, you should do a deep comparison. But you have to take one silly exception into account: because of a historical accident, typeof null also produces "object".

The ~Object.keys~ function will be useful when you need to go over the properties of objects to compare them.

#+begin_src js :exports both :results output
function deepEqual(first_obj, second_obj) {

    // handle with strict equality if possible
    if (first_obj === second_obj) {
        return true;
    }

    // Object.keys(null) returns TypeError, so avoid that and continue only if both values are objects.
    if (typeof first_obj !== "object" || typeof second_obj !== "object" ||
        first_obj == "null" || second_obj == "null"
    ) {

        return false;
    }

    first_keys = Object.keys(first_obj);
    second_keys = Object.keys(second_obj);

  //if the keys are not the same length, they cannot be equal
    if (first_keys.length !== second_keys.length) {
        return false;
    }
    for (key of first_keys) {
        //since key lengths are equal, each key must be present in both objects
        if (!second_keys.includes(key)) {
            return false;
        }

      return deepEqual(first_obj[key], second_obj[key]);

    }
    return true;
}

let obj = {here: {is: "an"}, object: 2};
console.log(deepEqual(obj, obj));
console.log(deepEqual(obj, {here: 1, object: 2}));
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
#+end_src

#+RESULTS:
: true
: false
: true
